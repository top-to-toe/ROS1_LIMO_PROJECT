// Generated by gencpp from file hello_ros/TimeWaitGoal.msg
// DO NOT EDIT!


#ifndef HELLO_ROS_MESSAGE_TIMEWAITGOAL_H
#define HELLO_ROS_MESSAGE_TIMEWAITGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hello_ros
{
template <class ContainerAllocator>
struct TimeWaitGoal_
{
  typedef TimeWaitGoal_<ContainerAllocator> Type;

  TimeWaitGoal_()
    : time_to_wait(0.0)  {
    }
  TimeWaitGoal_(const ContainerAllocator& _alloc)
    : time_to_wait(0.0)  {
  (void)_alloc;
    }



   typedef float _time_to_wait_type;
  _time_to_wait_type time_to_wait;





  typedef boost::shared_ptr< ::hello_ros::TimeWaitGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello_ros::TimeWaitGoal_<ContainerAllocator> const> ConstPtr;

}; // struct TimeWaitGoal_

typedef ::hello_ros::TimeWaitGoal_<std::allocator<void> > TimeWaitGoal;

typedef boost::shared_ptr< ::hello_ros::TimeWaitGoal > TimeWaitGoalPtr;
typedef boost::shared_ptr< ::hello_ros::TimeWaitGoal const> TimeWaitGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello_ros::TimeWaitGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello_ros::TimeWaitGoal_<ContainerAllocator1> & lhs, const ::hello_ros::TimeWaitGoal_<ContainerAllocator2> & rhs)
{
  return lhs.time_to_wait == rhs.time_to_wait;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello_ros::TimeWaitGoal_<ContainerAllocator1> & lhs, const ::hello_ros::TimeWaitGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_ros::TimeWaitGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_ros::TimeWaitGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_ros::TimeWaitGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "490f5a78b6ea9351e88beac27668bc8c";
  }

  static const char* value(const ::hello_ros::TimeWaitGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x490f5a78b6ea9351ULL;
  static const uint64_t static_value2 = 0xe88beac27668bc8cULL;
};

template<class ContainerAllocator>
struct DataType< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello_ros/TimeWaitGoal";
  }

  static const char* value(const ::hello_ros::TimeWaitGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Gaol\n"
"float32 time_to_wait # 목표 wait 시간\n"
"\n"
;
  }

  static const char* value(const ::hello_ros::TimeWaitGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_to_wait);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeWaitGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello_ros::TimeWaitGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello_ros::TimeWaitGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "time_to_wait: ";
    Printer<float>::stream(s, indent + "  ", v.time_to_wait);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_ROS_MESSAGE_TIMEWAITGOAL_H
