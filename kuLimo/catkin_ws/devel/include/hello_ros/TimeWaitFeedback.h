// Generated by gencpp from file hello_ros/TimeWaitFeedback.msg
// DO NOT EDIT!


#ifndef HELLO_ROS_MESSAGE_TIMEWAITFEEDBACK_H
#define HELLO_ROS_MESSAGE_TIMEWAITFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hello_ros
{
template <class ContainerAllocator>
struct TimeWaitFeedback_
{
  typedef TimeWaitFeedback_<ContainerAllocator> Type;

  TimeWaitFeedback_()
    : time_remaining(0.0)
    , time_elapsed(0.0)  {
    }
  TimeWaitFeedback_(const ContainerAllocator& _alloc)
    : time_remaining(0.0)
    , time_elapsed(0.0)  {
  (void)_alloc;
    }



   typedef float _time_remaining_type;
  _time_remaining_type time_remaining;

   typedef float _time_elapsed_type;
  _time_elapsed_type time_elapsed;





  typedef boost::shared_ptr< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct TimeWaitFeedback_

typedef ::hello_ros::TimeWaitFeedback_<std::allocator<void> > TimeWaitFeedback;

typedef boost::shared_ptr< ::hello_ros::TimeWaitFeedback > TimeWaitFeedbackPtr;
typedef boost::shared_ptr< ::hello_ros::TimeWaitFeedback const> TimeWaitFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello_ros::TimeWaitFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello_ros::TimeWaitFeedback_<ContainerAllocator1> & lhs, const ::hello_ros::TimeWaitFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.time_remaining == rhs.time_remaining &&
    lhs.time_elapsed == rhs.time_elapsed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello_ros::TimeWaitFeedback_<ContainerAllocator1> & lhs, const ::hello_ros::TimeWaitFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acdbae04adc7654db9c9b1a52d9ede06";
  }

  static const char* value(const ::hello_ros::TimeWaitFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacdbae04adc7654dULL;
  static const uint64_t static_value2 = 0xb9c9b1a52d9ede06ULL;
};

template<class ContainerAllocator>
struct DataType< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello_ros/TimeWaitFeedback";
  }

  static const char* value(const ::hello_ros::TimeWaitFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# feedback\n"
"float32 time_remaining # 남은 시간\n"
"float32 time_elapsed # 현재까지 경과 시간\n"
"\n"
"\n"
;
  }

  static const char* value(const ::hello_ros::TimeWaitFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_remaining);
      stream.next(m.time_elapsed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeWaitFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello_ros::TimeWaitFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello_ros::TimeWaitFeedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "time_remaining: ";
    Printer<float>::stream(s, indent + "  ", v.time_remaining);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "time_elapsed: ";
    Printer<float>::stream(s, indent + "  ", v.time_elapsed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_ROS_MESSAGE_TIMEWAITFEEDBACK_H
