#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Bool, Int16
from threading import Timer

class HybridControl:
    def __init__(self):
        rospy.init_node('hybrid_control')

        # Mode flags
        self.mode = "line_follow"  # or "patrol"

        # Subscribers
        rospy.Subscriber('gap', Int16, self.errorCallback)
        rospy.Subscriber('stop', Bool, self.stopCallback)
        rospy.Subscriber('rotate', Bool, self.rotateCallback)

        # Publisher
        self.cmd_pub_ = rospy.Publisher('cmd_vel', Twist, queue_size=10)

        # Line tracking
        self.stop_flag_ = False
        self.rotate_flag_ = False
        self.last_error_time = rospy.Time.now()
        self.timeout_sec = 3.0  # seconds to wait before mode switch

        # Timer for patrol mode switch
        rospy.Timer(rospy.Duration(1.0), self.modeManager)

        rospy.loginfo("Hybrid Control Node Initialized")

    def stopCallback(self, msg):
        self.stop_flag_ = msg.data

    def rotateCallback(self, msg):
        self.rotate_flag_ = msg.data

    def errorCallback(self, msg):
        if self.mode != "line_follow":
            return  # ignore line tracking when not in line_follow mode

        cmd = Twist()
        cmd.linear.x = 0.3
        cmd.angular.z = 0.1 * msg.data
        cmd.angular.z = max(min(cmd.angular.z, 2.0), -2.0)

        if self.stop_flag_:
            cmd.linear.x = 0.0
            cmd.angular.z = 0.0
        if self.rotate_flag_:
            cmd.linear.x = 0.0
            cmd.angular.z = 0.5

        self.cmd_pub_.publish(cmd)
        self.last_error_time = rospy.Time.now()

    def modeManager(self, event):
        now = rospy.Time.now()
        elapsed = (now - self.last_error_time).to_sec()

        if self.mode == "line_follow" and elapsed > self.timeout_sec:
            rospy.loginfo("Line lost. Switching to patrol mode.")
            self.mode = "patrol"
            # Patrol mode launched as subprocess or external node
            rospy.set_param("/start_patrol", True)

def main():
    HybridControl()
    rospy.spin()

if __name__ == '__main__':
    main()
