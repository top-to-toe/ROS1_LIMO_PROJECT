# rosrun hello_ros timeActionServer
# rosrun hello_ros timeActionClient2

import actionlib
import rospy
from hello_ros.msg import TimeWaitAction, TimeWaitFeedback, TimeWaitGoal, TimeWaitResult


class ActionClient:
    def __init__(self):
        self.client = actionlib.SimpleActionClient('timer_action', TimeWaitAction)
        rospy.loginfo("action 클라이언트가 요청 되었습니다.")
        self.client.wait_for_server() # 서버 요청을 기다림.

        goal = TimeWaitGoal()
        goal.time_to_wait = 5.0
        self.client.send_goal(goal, feedback_cb=self.feedback_cb, done_cb=self.done_cb) # 서버에 goal 을 요청함!

    def done_cb(self, state , result: TimeWaitResult):

        if state == actionlib.GoalStatus().SUCCEEDED:
            rospy.loginfo(f"Action finished : {state} SUCCEEDED")
            rospy.loginfo(f"Result : 경과 시간 {result.time_elapsed}, 피드백 횟수 {result.updates_sent}")
        if state == actionlib.GoalStatus().ABORTED:
            rospy.loginfo(f"Action finished : {state} aborted")
        if state == actionlib.GoalStatus().PENDING:
            rospy.loginfo(f"Action finished : {state} pending..")

    def feedback_cb(self, feedback: TimeWaitFeedback):
        rospy.loginfo(f"경과시간 : {feedback.time_elapsed}, 남은 시간 : {feedback.time_remaining}")

def main():
    rospy.init_node("action_client")
    node = ActionClient()
    try:
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

if __name__ == "__main__":
    main()
